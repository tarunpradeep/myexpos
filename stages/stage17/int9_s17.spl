alias userSP R0;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
userSP = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9;

alias file_name R1;
file_name = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];

alias file_index R2;
file_index = 0;
while(file_index < 60) do
    print [59*512 + file_index*16 + 1];
    if([59*512 + file_index*16 + 1] == file_name) then
        if ([59*512 + file_index*16] == 3) then   //checking whether the file is an XEXE file
            break;
        endif;
    endif;
    file_index = file_index + 1;
endwhile;
print "here1";
if (file_index == 60) then //not found
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
    SP = userSP;
    [[PTBR + 2*(userSP-1)/512] + (userSP-1)%512] = -1;
    ireturn;
endif;

//calling mod1 for exit process
multipush(R0, R1, R2);
R1 = 3;
R2 = file_index;
print "before_mod1";
call MOD_1;
print "after_mod1";
multipop(R0, R1, R2);

//reclaiming the user area page
alias UAPG R3;
UAPG = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11];
if ([57*512 + UAPG] == 0) then
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
endif;

[57*512 + UAPG] = [57*512 + UAPG] + 1;
SP = UAPG*512 - 1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7] = file_index;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

multipush(R0, R1, R2, R3);
//heap
R1 = 1;
call MOD_2;
[PTBR + 4] = R0;
[PTBR + 5] = "0110";
R1 = 1;
call MOD_2;
[PTBR + 6] = R0;
[PTBR + 7] = "0110";
//stack
R1 = 1;
call MOD_2;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";
R1 = 1;
call MOD_2;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";
multipop(R0, R1, R2, R3);

//code
[PTBR + 8] = -1;
[PTBR + 9] = "0000";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000"; 
[PTBR + 14] = -1;
[PTBR + 15] = "0000"; 
R0 = 0;

while(R0 < 4) do
    if([INODE_TABLE + 16*file_index + 8 + R0] == -1) then
        break;
    endif;

    multipush(R0, R1, R2, R3, R4);
    R1 = 1;
    call MOD_2;
    R5 = R0;
    multipop(R0, R1, R2, R3, R4);
    [PTBR + 8 + 2*R0] = R5;
    [PTBR + 8 + 2*R0 + 1] = "0100";
    loadi(R5, [INODE_TABLE + 16*file_index + 8 + R0]);
    R0 = R0 + 1;
endwhile;

SP = 8*512;
[[PTBR + 16]*512]=[[PTBR + 8]*512 + 1];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
breakpoint;
ireturn;                                                                        