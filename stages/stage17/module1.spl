alias fnno R1;
alias PID R2;

//free user area page
if (fnno == 2) then
    multipush(R1, R2);
    R3 = [PROCESS_TABLE + PID*16 + 11];
    R1 = 2;
    R2 = R3;
    call MOD_2;
    multipop(R1, R2);
    return;
endif;

//exit_process
if (fnno == 3) then
    multipush(R1, R2);
    R1 = 4;
    call MOD_1; //free page table
    R1 = 2;
    call MOD_1; //free user area page
    multipop(R1, R2);
    [PROCESS_TABLE + PID*16 + 4] = TERMINATED;
    return;
endif;

//free page table
if (fnno == 4) then
    [PAGE_TABLE_BASE + 20*PID + 0]=-1;
    [PAGE_TABLE_BASE + 20*PID + 1]="0000";
    [PAGE_TABLE_BASE + 20*PID + 2]=-1;
    [PAGE_TABLE_BASE + 20*PID + 3]="0000";
    R4 = PAGE_TABLE_BASE + 20*PID;
    R3 = 4;
    while(R3 < 20) do
        if ([R4 + R3] != -1) then
            R1 = 2;
            R2 = [R4 + R3];
            multipush(R1, R2, R3, R4);
            call MOD_2;
            multipop(R1, R2, R3, R4);
        endif;
        [R4 + R3] = -1;
        [R4 + R3 + 1] = "0000";
        R3 = R3 + 2;
    endwhile;
    
    R3 = 2;
    while (R3 <= 3) do
        if([DISK_MAP_TABLE + PID*10 + R3]!=-1) then //heap
            multipush(R0, R1, R2, R3);
            R3 = PID;
            R1 = 4;
            R2 = [DISK_MAP_TABLE + PID*10 + R3];
            call MOD_2; //release block no
            multipop(R0, R1, R2, R3);
        endif;

        if ([DISK_MAP_TABLE + PID*10 + R3 + 6]) then //stack
            multipush(R0, R1, R2, R3);
            R3 = PID;
            R1 = 4;
            R2 = [DISK_MAP_TABLE + PID*10 + R3];
            call MOD_2; //release block no
            multipop(R0, R1, R2, R3);
        endif;
        R3 =  R3 + 1;
    endwhile;

    R3 = 0;
    while (R3 < 10) do
        [DISK_MAP_TABLE + PID*10 + R3] = -1; //invalidate  the disk map table 
        R3 = R3 + 1;
    endwhile;
    return;
endif;


