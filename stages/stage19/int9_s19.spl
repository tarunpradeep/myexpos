alias userSP R0;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
userSP = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9;

alias file_name R1;
file_name = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
PTBR=[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 14];

alias file_index R2;
file_index = 0;

while(file_index < 60) do
    if([59*512 + file_index*16 + 1] == file_name) then
        if ([59*512 + file_index*16] == 3) then   //checking whether the file is an XEXE file
            break;
        endif;
    endif;
    file_index = file_index + 1;
endwhile;

if (file_index >= 60) then //not found
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
    SP = userSP;
    [[PTBR + 2*(userSP-1)/512] + (userSP-1)%512] = -1;
    ireturn;
endif;


//calling mod1 for exit process
multipush(R0, R1, R2);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R0, R1, R2);

//reclaiming the user area page
alias UAPG R3;
UAPG = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11];
if ([MEMORY_FREE_LIST + UAPG] == 0) then
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
endif;

[MEMORY_FREE_LIST + UAPG] = [MEMORY_FREE_LIST + UAPG] + 1;
SP = UAPG*512 - 1;

//per process table
R4 = (UAPG+1)*512 - 16;
while((R4 < (UAPG+1)*512)) do
    [R4] = -1;
    R4 = R4+1;
endwhile;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7] = file_index;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

multipush(R0, R1, R2, R3, PTBR, PTLR);
//heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

//stack
multipush(PTBR);
R1 = 1;
call MOD_2;
multipop(PTBR);
[PTBR + 16] = R0;
[PTBR + 17] = "0110";
multipush(PTBR);
R1 = 1;
call MOD_2;
multipop(PTBR);
[PTBR + 18] = R0;
[PTBR + 19] = "0110";
multipop(R0, R1, R2, R3, PTBR, PTLR);

//code
[PTBR + 8] = -1;
[PTBR + 9] = "0000";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000"; 
[PTBR + 14] = -1;
[PTBR + 15] = "0000"; 

//loading 1st code block
multipush(R0, R1, R2, R3, PTBR, PTLR);
R1 = 5;
R2 = [INODE_TABLE + file_index*16 + 8];
R3 = file_index;
call MOD_2; //get code page
[PTBR + 8] = R0;
[PTBR + 9] = "0100";
multipop(R0, R1, R2, R3, PTBR, PTLR);

[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 0] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 1] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 2] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 3] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 4] = [INODE_TABLE + file_index*16 + 8];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 5] = [INODE_TABLE + file_index*16 + 9];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 6] = [INODE_TABLE + file_index*16 + 10];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 7] = [INODE_TABLE + file_index*16 + 11];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 8] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 9] = -1;

SP = 8*512;
[[PTBR + 16]*512]=[[PTBR + 8]*512 + 1];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
ireturn;
