alias fnno R1;
//get free page
if (fnno == 1) then
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    while ([SYSTEM_STATUS_TABLE + 2] == 0) do //checking if there are any free pages
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_MEM;
        multipush(R1);
        call MOD_5;
        multipop(R1);
    endwhile;
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1; //wait mem free count
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1; //mem free count

    //finding a free page
    R2 = 0;
    while ([MEMORY_FREE_LIST + R2] != 0) do
        R2 = R2 + 1;
    endwhile;
    [MEMORY_FREE_LIST + R2] = 1;
    R0 = R2; //page no of free page
    return;
endif;

//release page
if (fnno == 2) then
    alias pagenum R2;
    [57*512 + pagenum] = [57*512 + pagenum] - 1;
    if ([57*512 + pagenum] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;
    R3 = 1;
    while(R3 < 16) do
        if ([PROCESS_TABLE + R3*16 + 4] == WAIT_MEM) then
            [PROCESS_TABLE + R3*16 + 4] = READY;
        endif;
        R3 = R3 + 1;
    endwhile;
    return;
endif;

//release block
if (fnno == 4) then
    [DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
    return;
endif;

//get code page
if (fnno == 5) then
    alias blocknum R2;
    R8 = 0;
    while(R8 < 160) do
        // If the required code page is already loaded by some other process, we simply increment the share count in the Mem Free List
        if ([DISK_MAP_TABLE + R8] == blocknum) then
            R4 = R8/10; //process id
            R5 = R8%10; //code block num (whether it is 4, 5, 6, 7)
            if ([PAGE_TABLE_BASE + R4*20 + R5*2] != -1) then
                R0 = [PAGE_TABLE_BASE + R4*20 + R5*2];
                [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                return;
            endif;
        endif;
        R8 = R8 + 1;
    endwhile;
    // The code page is not in memory, and has to be loaded from disk

    multipush(R0, R1, R2);
    R1 = 1;
    call MOD_2;
    R3 = R0;
    multipop(R0, R1, R2);

    multipush(R0, R1, R2, R3, R4);
    R4 = blocknum;
    R1 = 2;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = R3;
    call MOD_4;
    multipop(R0, R1, R2, R3, R4);
    R0 = R3;
    return;
endif;

return;







