[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 8;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;

//get pcb entry and child pid 
multipush(R1, R2, R3);
R1 = 1;
call MOD_1;
multipop(R1, R2, R3);
alias child_PID R3;
child_PID = R0;

if (child_PID == -1) then
    R1 = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] -1;
    [[PTBR + (R1/512)*2]*512 + (R1%512)] = -1; //??
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
    ireturn;
endif;

//setting up parent's heap if not allocated
if ([PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 4] == -1) then
    multipush(R0, R1, R2, R3);
    R1 = 1;
    call MOD_2;
    [PTBR + 4] = R0;
    [PTBR + 5] = "1110";

    R1 = 1;
    call MOD_2;
    [PTBR + 6] = R0;
    [PTBR + 7] = "1110";
    multipop(R0, R1, R2, R3);
endif;

//setting up child's stack and user page
multipush(R0, R1, R2, R3);
R1 = 1;
call MOD_2;
[PAGE_TABLE_BASE + child_PID*20 + 16] = R0;
[PAGE_TABLE_BASE + child_PID*20 + 17] = "1110";

R1 = 1;
call MOD_2;
[PAGE_TABLE_BASE + child_PID*20 + 18] = R0;
[PAGE_TABLE_BASE + child_PID*20 + 19] = "1110";

R1 = 1;
call MOD_2;
[PROCESS_TABLE + child_PID*16 + 11] = R0;
multipop(R0, R1, R2, R3);

[PROCESS_TABLE + child_PID*16 + 0] = 0;
[PROCESS_TABLE + child_PID*16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 3];
[PROCESS_TABLE + child_PID*16 + 9] = 0;
[PROCESS_TABLE + child_PID*16 + 12] = 0;
[PROCESS_TABLE + child_PID*16 + 2] = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + child_PID*16 + 4] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4];
[PROCESS_TABLE + child_PID*16 + 6] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 6];
[PROCESS_TABLE + child_PID*16 + 7] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7];
[PROCESS_TABLE + child_PID*16 + 10] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 10];
[PROCESS_TABLE + child_PID*16 + 12] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 12];
[PROCESS_TABLE + child_PID*16 + 13] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];


//copying per-process disk map table
R12 = 0;
while(R12<10) do
    [DISK_MAP_TABLE + child_PID*10 + R12] =  [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE]*10 + R12];
    R12 = R12 + 1;
endwhile;

//copying page table
R12 = 0;
while(R12<16) do
    [PAGE_TABLE_BASE + child_PID*20 + R12] = [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + R12];
    if (R12%2 == 0) then
        [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + child_PID*20 + R12]] = [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + child_PID*20 + R12]] + 1;
    endif;
    R12 = R12 + 1;
endwhile;

//copy user stack
R12 = 0;
alias child_stack R4;
alias parent_stack R5;
child_stack = [PAGE_TABLE_BASE + child_PID*20 + 16];
parent_stack = [PTBR + 16];
breakpoint;
while(R12 < 512) do
    [child_stack*512 + R12] = [parent_stack*512 + R12];
    R12 = R12 + 1;
endwhile;

R12 = 0;
child_stack = [PAGE_TABLE_BASE + child_PID*20 + 18];
parent_stack = [PTBR + 18];
while(R12 < 512) do
    [child_stack*512 + R12] = [parent_stack*512 + R12];
    R12 = R12 + 1;
endwhile;

[[PROCESS_TABLE+ child_PID*16 + 11]*512] = BP;
breakpoint;
R1 = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13]-1;
[[PTBR + (R1/512)*2]*512 + (R1%512)] = child_PID;
[[PAGE_TABLE_BASE + child_PID*20 + (R1/512)*2]*512 + (R1%512)] = 0;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
[PROCESS_TABLE + child_PID*16 + 4] = CREATED;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
ireturn;