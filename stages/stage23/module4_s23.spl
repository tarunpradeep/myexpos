alias functionNum R1;
alias currentPID R2;

//disk store
if (functionNum == 1) then
    //acquire disk
    multipush(R1, R2, R3, R4);
    R1 = 3;
    R2 = currentPID;
    call MOD_0;
    multipop(R1, R2, R3, R4);

    [DISK_STATUS_TABLE + 1] = 1;
    [DISK_STATUS_TABLE + 2] = R3;
    [DISK_STATUS_TABLE + 3] = R4;
    store(R3, R4);
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
    call MOD_5;
    return;
endif;

    
//disk load
if (functionNum == 2) then
    multipush(R1, R2, R3, R4);
    R1 = 3;
    call MOD_0;
    multipop(R1, R2, R3, R4);
    [DISK_STATUS_TABLE + 1] = 0; //load/store bit
    [DISK_STATUS_TABLE + 2] =  R3; //memory page no.
    [DISK_STATUS_TABLE + 3] = R4; //disk block
    load(R3, R4);
    [PROCESS_TABLE + 16*currentPID + 4] = WAIT_DISK;
    call MOD_5; //scheduler
    return;
endif;

//terminal write
if (functionNum == 3) then
    //acquire terminal
    multipush(R1, R2, R3);
    R1 = 8;
    R2 = currentPID;
    call MOD_0;
    multipop(R1, R2, R3);
    print R3;
    //release terminal
    multipush(R1, R2, R3);
    R1 = 9;
    R2 = currentPID;
    call MOD_0;
    R4 = R0;
    multipop(R1, R2, R3);
    return;
endif;

//terminal read
if (functionNum == 4) then
    multipush(R1, R2, R3);
    R1 = 8;
    R2 = currentPID;
    call MOD_0;
    multipop(R1, R2, R3);
    read;
    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL; 
    multipush(R1, R2, R3);
    call MOD_5; //schedule another process while process is reading from the terminal
    multipop(R1, R2, R3);
    [[PTBR+2*(R3/512)]*512 + R3%512] = [PROCESS_TABLE+ 16*currentPID + 8]; //logical address of R3 is converted into its physical address, R3 contains the address of the word
    return;
else
    return;
endif;
