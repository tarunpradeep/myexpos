//load library
loadi(63,13);
loadi(64,14);

//load init code
loadi(65,7);
loadi(66,8);

//load int10 module
loadi(22,35);
loadi(23,36);

//load exception handler
loadi(2,15);
loadi(3,16);

//load timer interrupt
loadi(4,17);
loadi(5,18);

//load disk interrupt int2
loadi(6,19);
loadi(7,20);

//load int7 
loadi(16,29);
loadi(17,30);

//load module 4
loadi(40, 53);
loadi(41, 54);

//load module 0
loadi(48, 61);
loadi(49, 62);

//load module 5
loadi(50,63);
loadi(51,64);

//load int 6
loadi(14 ,27);
loadi(15 ,28);

//load console interrupt handler
loadi(8, 21);
loadi(9, 22);

//load int9
loadi(20, 33);
loadi(21, 34);

//load module 1
loadi(42, 55);
loadi(43, 56);

//load module 2
loadi(44, 57);
loadi(45, 58);

//load inode table
loadi(59, 3);
loadi(60, 4);

//load disk free list 
loadi(61, 2);

//load int 8
loadi(18, 31);
loadi(19, 32);

//load int 11
loadi(24, 37);
loadi(25, 38);

//load int 15
loadi(32, 45);
loadi(33, 46);

//load int 13
loadi(28, 41);
loadi(29, 42);

//load int 14
loadi(30, 43);
loadi(31, 44);

//load int 4
loadi(10, 23);
loadi(11, 24);

//load int 5
loadi(12, 25);
loadi(13, 26);

//load module 3
loadi(46, 59);
loadi(47, 60);


//INIT PROGRAM PAGE TABLE
PTBR=PAGE_TABLE_BASE+20;
PTLR=10;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
[PTBR+4]=78;
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

//code
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//stack
[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";

[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 3] = 1;
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PTBR;
[PROCESS_TABLE + 16 + 15] = 10;
[76*512] = [65*512 + 1];

[DISK_STATUS_TABLE] = 0;//initialise disk status table

//initialise per process table
R1 = 80*512 + 512 - 16;
while(R1<80*512+512) do
    [R1]=-1;
    R1=R1+1;
endwhile;

//initialise disk map table
R1 = 0;
while(R1 < 10)	do
	[DISK_MAP_TABLE+ 10 + R1]=-1;
	R1 = R1 + 1;
endwhile;
[DISK_MAP_TABLE + 10 + 4] = 7;
[DISK_MAP_TABLE + 10 + 5] = 8;

//intialising memory free list
R1 = 0;
while(R1<=82) do 	
	[MEMORY_FREE_LIST + R1] = 1;
	R1 = R1 + 1;
endwhile;
while(R1 <= 127) do 	
	[MEMORY_FREE_LIST + R1] = 0;
	R1 = R1 + 1;
endwhile;

//initialise wait_mem_count and mem_free_count
[SYSTEM_STATUS_TABLE+2] = 45;
[SYSTEM_STATUS_TABLE+3] = 0;

[PROCESS_TABLE + 16*2 + 4] = TERMINATED;
[PROCESS_TABLE + 16*3 + 4] = TERMINATED;
[PROCESS_TABLE + 16*4 + 4] = TERMINATED;
[PROCESS_TABLE + 16*5 + 4] = TERMINATED;
[PROCESS_TABLE + 16*6 + 4] = TERMINATED;
[PROCESS_TABLE + 16*7 + 4] = TERMINATED;
[PROCESS_TABLE + 16*8 + 4] = TERMINATED;
[PROCESS_TABLE + 16*9 + 4] = TERMINATED;
[PROCESS_TABLE + 16*10 + 4] = TERMINATED;
[PROCESS_TABLE + 16*11 + 4] = TERMINATED;
[PROCESS_TABLE + 16*12 + 4] = TERMINATED;
[PROCESS_TABLE + 16*13 + 4] = TERMINATED;
[PROCESS_TABLE + 16*14 + 4] = TERMINATED;
[PROCESS_TABLE + 16*15 + 4] = TERMINATED;

[TERMINAL_STATUS_TABLE] = 0;

//intialising semaphore table
R1 = SEMAPHORE_TABLE;
while(R1 < SEMAPHORE_TABLE + 32*4) do  
	[R1]=-1;
	[R1 + 1]=0;
	R1 = R1 + 4;
endwhile;

//initialise file status table
R1 = 0;
while(R1 < 60) do
    [FILE_STATUS_TABLE + R1*4] = -1;
    [FILE_STATUS_TABLE + R1*4 + 1] = -1;
    R1 = R1 + 1;
endwhile;

//initialise buffer table
R1 = 0;
while (R1 < 4) do
    [BUFFER_TABLE + R1*4] = -1;
    [BUFFER_TABLE + R1*4 + 1] = 0;
    [BUFFER_TABLE + R1*4 + 2] = -1;
    R1 = R1 + 1;
endwhile;

//initialise open file table
R1 = 0;
while(R1 < MAX_OPENFILE_NUM) do
    [OPEN_FILE_TABLE + R1*4] = -1;
    [OPEN_FILE_TABLE + R1*4 + 1] = 0;
    R1 = R1 + 1;
endwhile;
breakpoint;
return;
