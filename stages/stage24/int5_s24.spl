alias user_SP R1;
user_SP = SP;

//extracting system call
alias syscall_num R2;
syscall_num = [[PTBR + 2*((user_SP - 5)/512)]*512 + (user_SP - 5)%512];

alias ptcurr R3;
ptcurr = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

alias returnval R4;
returnval = [PTBR + 2*((user_SP - 1)/512)]*512 + (user_SP - 1)%512;

//switching to kernel stack
[ptcurr + 13] = SP;
SP = [ptcurr + 11]*512 - 1;

//open
if (syscall_num == 2) then
    [ptcurr + 9] = 2;

    //finding a free per process table entry
    alias uapg R5;
    uapg = [ptcurr + 11];
    alias per_pt R6;
    per_pt = uapg*512 + RESOURCE_TABLE_OFFSET;

    while (per_pt < (uapg*512 + 512)) do
        if ([per_pt] == -1) then
            break;
        endif;
        per_pt = per_pt + 2;
    endwhile;

    //no free entry
    if (per_pt == (uapg*512 + 512)) then
        [returnval] = -3;
        SP = user_SP;
        [ptcurr + 9] = 0;
        ireturn;
    endif;

    alias file_name R7;
    file_name = [[PTBR + 2*((user_SP - 4)/512)]*512 + (user_SP - 4)%512];


    //open file 
    multipush(R1, R2, R3, R4, R5, R6, R7);
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = file_name;
    call MOD_3;
    multipop(R1, R2, R3, R4, R5, R6, R7);

    
    if (R0 == -1 || R0 == -2) then
        [returnval] = R0;
        SP = user_SP;
        [ptcurr + 9] = 0;
        ireturn;
    endif;

    //setting up per process table
    [per_pt] = FILE;
    [per_pt + 1] = R0;

    [ptcurr + 9] = 0;
    SP = user_SP;
    [returnval] = (per_pt - (uapg*512 + RESOURCE_TABLE_OFFSET))/2; //index of per process resource table 
    breakpoint;
    ireturn;
endif;


//close
if (syscall_num == 3) then
    [ptcurr + 9] = 3;

    alias file_desc R5;
    file_desc = [[PTBR + 2*(user_SP - 4)/512] + (user_SP-4)%512];

    //file descriptor invalid
    if (file_desc < 0 || file_desc > 7) then
        [returnval] = -1;
        SP = user_SP;
        ireturn;
    endif; 

    alias per_pt R6;
    per_pt = [ptcurr + 11]*512 + RESOURCE_TABLE_OFFSET;
    if ([per_pt + 2*file_desc] != FILE) then
        [returnval] = -1;
        SP = user_SP;
        ireturn;
    endif;

    alias open_file_index R7;
    open_file_index  = [per_pt + 2*file_desc + 1];

    //close()
    multipush(R1, R2, R3, R4, R5, R6, R7);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = open_file_index;
    call MOD_3;
    multipop(R1, R2, R3, R4, R5, R6, R7);

    //invalidate per process resource table
    [per_pt + 2*file_desc] = -1;
    [per_pt + 2*file_desc + 1] = -1;

    [ptcurr + 9] = 0;
    SP = user_SP;
    [returnval] = 0;
    ireturn;
endif;





















