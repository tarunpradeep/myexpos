alias user_SP R1;
user_SP = SP;

alias ptcurr R2;
ptcurr = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

[ptcurr + 9] = 7;

alias returnval R3;
returnval = [PTBR + 2*((user_SP - 1)/512)]*512 + (user_SP - 1)%512;

//switching to kernel stack
[ptcurr + 13] = SP;
SP = [ptcurr + 11]*512 - 1;

alias file_desc R4;
file_desc = [[PTBR + 2*(user_SP - 4)/512]*512 + (user_SP-4)%512];

if (file_desc == -1) then

    alias wordAddr R5;
    wordAddr = [([PTBR + 2*((user_SP-3)/512)]*512) + ((user_SP-3)%512)]; //finding the word

    multipush(R0, R1, R2, R3, R4, R5);
    R1 = 4; //calling terminal write from module 4(device manager module)
    R2 = [SYSTEM_STATUS_TABLE+1];
    R3 = wordAddr;
    call MOD_4;
    multipop(R0, R1, R2, R3, R4, R5);

    [returnval] = 0;

else
    if (file_desc < 0 || file_desc > 7) then
        [returnval] = -1;
    else
        alias per_pt R5;
        per_pt = [ptcurr + 11]*512 + RESOURCE_TABLE_OFFSET;


        if ([per_pt + 2*file_desc] != FILE) then
            [returnval] = -1;
        else
            alias open_file_index R6;
            open_file_index = [per_pt + 2*file_desc + 1];
    
            alias inode_index R7;
            inode_index = [OPEN_FILE_TABLE + open_file_index*4];

            //acquire inode
            multipush(R1, R2, R3, R4, R5, R6, R7);
            R1 = 4;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = inode_index;
            call MOD_0;
            multipop(R1, R2, R3, R4, R5, R6, R7);

            //lock failed
            if (R0 == -1) then
                [returnval] = -1;
            else
                alias lseek R8;
                lseek = OPEN_FILE_TABLE + open_file_index*4 + 2;


                alias wordAddr R11;
                wordAddr = [([PTBR + 2*((user_SP-3)/512)]*512) + ((user_SP-3)%512)];
                if (inode_index == INODE_ROOT) then
                    if ([lseek] == 480) then
                        //release inode
                        multipush(R1, R2, R3, R4, R5, R6, R7, R8, R11);
                        R1 = 5;
                        R2 = [SYSTEM_STATUS_TABLE + 1];
                        R3 = inode_index;
                        call MOD_0;
                        multipop(R1, R2, R3, R4, R5, R6, R7, R8, R11);
                        [returnval] = -2;
                    else
                        [[PTBR + 2*(wordAddr/512)]*512 + (wordAddr%512)] = [ROOT_FILE + [lseek]];
                        [lseek] = [lseek] + 1;
                        [returnval] = 0;
                    endif;
                else
                

                    if ([lseek] == [INODE_TABLE + inode_index*16 + 2]) then
                        //release inode
                        multipush(R1, R2, R3, R4, R5, R6, R7, R8, R11);
                        R1 = 5;
                        R2 = [SYSTEM_STATUS_TABLE + 1];
                        R3 = inode_index;
                        call MOD_0;
                        multipop(R1, R2, R3, R4, R5, R6, R7, R8, R11);
                        [returnval] = -2;
                    else
                        alias disk_block R9;
                        alias block_offset R10;

                        disk_block = [INODE_TABLE + inode_index*16 + 8 + ([lseek]/512)];
                        block_offset = ([lseek])%512;


                    //buffered read
                        multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);
                        R1 = 2;
                        R2 = disk_block;
                        R3 = block_offset;
                        R4 = wordAddr;
                        call MOD_3;
                        multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9, R10);

                        [OPEN_FILE_TABLE + open_file_index*4 + 2] = [lseek] + 1;
                        [returnval] = 0;
                    endif;
                endif;
                //release inode
                 multipush(R1, R2, R3, R4, R5, R6, R7, R8);
                R1 = 5;
                R2 = [SYSTEM_STATUS_TABLE + 1];
                R3 = inode_index;
                call MOD_0;
                multipop(R1, R2, R3, R4, R5, R6, R7, R8);
            endif;
        endif;
    endif;
endif;

[ptcurr + 9] = 0;
SP = user_SP;
ireturn;
