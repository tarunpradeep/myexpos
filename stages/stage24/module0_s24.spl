alias functionNum R1;
alias currentPID R2;

//acquire buffer
if (functionNum == 1) then
    alias buffer_number R3;
    while ([BUFFER_TABLE + buffer_number*4 + 2] == currentPID) do
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_BUFFER;
        [PROCESS_TABLE + currentPID*16 + 4] = buffer_number;
        multipush(R1, R2, R3);
        call MOD_5;
        multipop(R1, R2, R3);
    endwhile;

    [BUFFER_TABLE + buffer_number*4 + 2] = currentPID;
    return;
endif;

//release buffer
if (functionNum == 2) then
    alias buffer_number R3;
    if (currentPID != [BUFFER_TABLE + buffer_number*4 + 2]) then
        R0 = -1;
        return;
    endif;

    [BUFFER_TABLE + buffer_number*4 + 2] = -1;

    R4 = 0;
    while(R4 < 16) do
        if ([PROCESS_TABLE + R4*16 + 4] == WAIT_BUFFER && [PROCESS_TABLE + R4*16 + 4] == buffer_number) then
            [PROCESS_TABLE + R4*16 + 4] = READY;
            [PROCESS_TABLE + R4*16 + 5] = -1;
        endif;
        R4 = R4 + 1;
    endwhile;

    R0 = 0;
    return;
endif;

//acquire terminal
if (functionNum == 8) then
    while([TERMINAL_STATUS_TABLE]==1) do
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
        multipush(R1, R2);
        call MOD_5;
        multipop(R1, R2);
    endwhile;
    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE+1] = currentPID;
    return;
endif;

//release terminal
if (functionNum == 9) then
    if (currentPID != [TERMINAL_STATUS_TABLE+1]) then
        R0 = -1;
        return;
    endif;
    [TERMINAL_STATUS_TABLE] = 0;
    R3 = 1;
    while (R3<=15) do
        if ([PROCESS_TABLE + R3*16 + 4] == WAIT_TERMINAL) then
            [PROCESS_TABLE + R3*16 + 4] = READY;
        endif;
        R3 = R3+1;
    endwhile;
    R0 = 0;
    return;
endif;

//acquire disk
if (functionNum == 3) then
    while ([DISK_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + 16*currentPID + 4] = WAIT_DISK;
        multipush(R0, R1, R2);
        call MOD_5;
        multipop(R0, R1, R2);
    endwhile;
    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
    return;
endif;

//acquire semaphore
if (functionNum == 6) then
    R3 = 0;
    while(R3 < 32) do
        if ([SEMAPHORE_TABLE + R3*4 + 1] == 0) then
            [SEMAPHORE_TABLE + R3*4 + 1] = [SEMAPHORE_TABLE + R3*4 + 1] + 1;
            [SEMAPHORE_TABLE + R3*4] = -1;
            R0 = R3;
            return;
        endif;
        R3 = R3 + 1;
    endwhile;

    if (R3 == 32) then
        R0 = -1;
        return;
    endif;
endif;

//release semaphore
if (functionNum == 7) then
    alias sem R3;
    if ([SEMAPHORE_TABLE + sem*4] == currentPID) then
        [SEMAPHORE_TABLE + sem*4] = -1;
        R4 = 0;
        while(R4 < 16) do
            if ([PROCESS_TABLE + R4*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + R4*16 + 5] == sem) then
                [PROCESS_TABLE + R4*16 + 4] = READY;
                [PROCESS_TABLE + R4*16 + 5] = -1;
            endif;
            R4 = R4 + 1;
        endwhile;
    endif;

    [SEMAPHORE_TABLE + sem*4 + 1] = [SEMAPHORE_TABLE + sem*4 + 1] - 1;

    return;
endif;

//acquire inode
if (functionNum == 4) then
    alias inode_index R3;
    while ([FILE_STATUS_TABLE + inode_index*16] != -1) do
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_FILE;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 5] = inode_index;
        multipush(R1, R2, R3);
        call MOD_5;
        multipop(R1, R2, R3);
    endwhile;
    
    if ([INODE_TABLE + inode_index*16 + 1] == -1) then
        R0 = -1;
        return;
    endif;

    [FILE_STATUS_TABLE + inode_index*4] =  currentPID;
    R0 = 0;
    return;
endif;

//release inode
if (functionNum == 5) then
    alias inode_index R3;
    if ([INODE_TABLE + inode_index*16] != currentPID) then
        R0 = -1;
        return;
    endif;

    R10 = 0;
    while(R10 < 16 ) do
        if ( [PROCESS_TABLE + R10*16 + 4] == WAIT_FILE && [PROCESS_TABLE + R10*16 + 5] == inode_index) then
            [PROCESS_TABLE + R10*16 + 4] = READY;
            [PROCESS_TABLE + R10*16 + 5] = -1;
        endif;
        R10 = R10 + 1;
    endwhile;

    R0 = 0;
    return;
endif;




