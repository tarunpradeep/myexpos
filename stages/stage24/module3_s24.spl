alias fnno R1;

//buffered read
if (fnno == 2) then
    alias disk_block R2;
    alias block_offset R3;
    alias wordAddr R4;

    alias buffer_number R5;
    buffer_number = (disk_block)%4;

    //acquire buffer
    multipush(R1, R2, R3, R4, R5);
    R1 = 1;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = buffer_number;
    call MOD_0;
    multipop(R1, R2, R3, R4, R5);

    alias buff_t R6;
    buff_t = BUFFER_TABLE + buffer_number*4;
    if (disk_block != [buff_t]) then
        if ([buff_t + 1] == 1) then

            //disk store
            multipush(R1, R2, R3, R4, R5, R6);
            R1 = 1;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = BUFFER_BASE + buffer_number; //page number;
            R4 = [buff_t]; //disk block
            call MOD_4; 
            multipop(R1, R2, R3, R4, R5, R6);

            [buff_t + 2] = 0;
        endif;

        //disk load
        multipush(R1, R2, R3, R4, R5, R6, R7);
        R1 = 2;
        R4 = disk_block;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = BUFFER_BASE + buffer_number;
        call MOD_4;
        multipop(R1, R2, R3, R4, R5, R6, R7);

        [buff_t] = disk_block;
    endif;

    [[PTBR + 2*(wordAddr/512)]*512 + (wordAddr%512)] = [(BUFFER_BASE + buffer_number)*512 + block_offset];


    multipush(R1, R2, R3, R4, R5, R6, R7);
    R1 = 2;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = buffer_number;
    call MOD_0;
    multipop(R1, R2, R3, R4, R5, R6, R7);
    
    return;
endif;

//open
if (fnno == 3) then
    alias file_name R3;

    alias inode_index R4;
    inode_index = 0;
    while(inode_index < MAX_FILE_NUM) do
        if ([INODE_TABLE + inode_index*16 + 1] == file_name) then
            break;
        endif;
        inode_index = inode_index + 1;
    endwhile;

    if (inode_index ==  MAX_FILE_NUM) then
        R0 = -1;
        return;
    endif;

    //acquire inode
    multipush(R1, R2, R3, R4);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = inode_index;
    call MOD_0;
    multipop(R1, R2, R3, R4);

    //locking failed
    if (R0 == -1) then
        R0 = -1;
        return;
    endif;

    //file type is exec
    if ([INODE_TABLE + inode_index*16] == EXEC) then
        //release inode
        multipush(R1, R2, R3, R4);
        R1 = 5;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = inode_index;
        call MOD_0;
        multipop(R1, R2, R3, R4);

        R0 = -1;
        return;
    endif;

    alias ft_index R5;
    ft_index = 0;
    while(ft_index < MAX_OPENFILE_NUM) do
        if ([OPEN_FILE_TABLE + ft_index*4] == -1) then
            break;
        endif;
        ft_index = ft_index + 1;
    endwhile;

    //no open file table entries left
    if (ft_index == MAX_OPENFILE_NUM) then
        //release inode
        multipush(R1, R2, R3, R4, R5);
        R1 = 5;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = inode_index;
        call MOD_0;
        multipop(R1, R2, R3, R4, R5);

        R0 = -2;
        return;
    endif;

    if (file_name == ROOT) then
        [OPEN_FILE_TABLE + ft_index*4] = INODE_ROOT;
    else
        if ([FILE_STATUS_TABLE + inode_index*4 + 1] == -1) then
            [FILE_STATUS_TABLE + inode_index*4 + 1] = 1;
        else
            [FILE_STATUS_TABLE + inode_index*4 + 1] = [FILE_STATUS_TABLE + inode_index*4 + 1] + 1;
        endif;
        [OPEN_FILE_TABLE + ft_index*4] = inode_index; 
    endif;

    [OPEN_FILE_TABLE + ft_index*4 + 1] = 1;
    [OPEN_FILE_TABLE + ft_index*4 + 2] = 0;
    
    //release inode
    multipush(R1, R2, R3, R4, R5);
    R1 = 5;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = inode_index;
    call MOD_0;
    multipop(R1, R2, R3, R4, R5);

    R0 = ft_index;
    return;
endif;

//close
if (fnno == 4) then
    alias file_index R3;
    alias inode_index R4;
    inode_index = [OPEN_FILE_TABLE + file_index*4];

    [OPEN_FILE_TABLE + file_index*4 + 1] = [OPEN_FILE_TABLE + file_index*4 + 1] - 1;

    if ([OPEN_FILE_TABLE + file_index*4 + 1] == 0) then
        [OPEN_FILE_TABLE + file_index*4] = -1;
        [OPEN_FILE_TABLE + file_index*4 + 1] = -1;
        [OPEN_FILE_TABLE + file_index*4 + 2] = -1;
        [OPEN_FILE_TABLE + file_index*4 + 3] = -1;

        if ([INODE_TABLE + inode_index*4] != ROOT) then
            [FILE_STATUS_TABLE + inode_index*4 + 1] = [FILE_STATUS_TABLE + inode_index*4 + 1] - 1;
        endif;

        if ([FILE_STATUS_TABLE + inode_index*4 + 1] == 0) then
            [FILE_STATUS_TABLE + inode_index*4 + 1] = -1;
        endif;
    endif;

    return;
endif;

